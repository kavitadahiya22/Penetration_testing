#!/bin/bash

# Test Script for Enhanced Analytics Endpoints
# DevOps Engineer: API Testing and Validation

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

API_BASE_URL="http://localhost:8080"

echo -e "${BLUE}üß™ Cybrty Pentest Platform - API Testing${NC}"
echo -e "${BLUE}=========================================${NC}"

# Function to print status
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to test endpoint
test_endpoint() {
    local endpoint=$1
    local description=$2
    
    print_status "Testing: $description"
    echo -e "  üìç Endpoint: ${YELLOW}$endpoint${NC}"
    
    response=$(curl -s -w "\n%{http_code}" "$API_BASE_URL$endpoint" || echo -e "\n000")
    http_code=$(echo "$response" | tail -n1)
    body=$(echo "$response" | head -n -1)
    
    if [[ "$http_code" == "200" ]]; then
        echo -e "  ‚úÖ Status: ${GREEN}$http_code OK${NC}"
        echo -e "  üìÑ Response: $(echo "$body" | jq -r '.message // .status // "Success"' 2>/dev/null || echo "Success")"
    elif [[ "$http_code" == "404" ]]; then
        echo -e "  ‚ö†Ô∏è  Status: ${YELLOW}$http_code Not Found${NC} (endpoint may not be implemented yet)"
    elif [[ "$http_code" == "000" ]]; then
        echo -e "  ‚ùå Status: ${RED}Connection Failed${NC}"
        return 1
    else
        echo -e "  ‚ùå Status: ${RED}$http_code Error${NC}"
        echo -e "  üìÑ Response: $(echo "$body" | head -n 3)"
    fi
    echo
}

# Check if API is running
print_status "Checking if API is running..."
if ! curl -s "$API_BASE_URL/api/v1/health" > /dev/null; then
    print_error "API is not running at $API_BASE_URL"
    print_error "Please start the application first with: ./docker/start-docker.sh"
    exit 1
fi

print_status "‚úÖ API is running!"
echo

# Test Core Endpoints
echo -e "${BLUE}üîß Core API Endpoints${NC}"
test_endpoint "/api/v1/health" "Health Check"
test_endpoint "/" "Root Endpoint"
test_endpoint "/docs" "API Documentation"

# Test Enhanced Analytics Endpoints
echo -e "${BLUE}üìä Enhanced Analytics Endpoints${NC}"
test_endpoint "/api/v1/analytics/dashboard" "Dashboard Data"
test_endpoint "/api/v1/analytics/agents/performance" "Agent Performance"
test_endpoint "/api/v1/analytics/security/events" "Security Events"
test_endpoint "/api/v1/analytics/tasks/executions" "Task Executions"
test_endpoint "/api/v1/analytics/workflows" "Workflow Analytics"

# Test Agent-Specific Endpoints
echo -e "${BLUE}üë• Agent-Specific Endpoints${NC}"
test_endpoint "/api/v1/analytics/agents/test-agent/dashboard" "Agent Dashboard"
test_endpoint "/api/v1/analytics/agents/test-agent/performance" "Agent Performance Details"

# Test Report Generation
echo -e "${BLUE}üìã Report Generation${NC}"
print_status "Testing report generation endpoint..."
report_response=$(curl -s -X POST \
  "$API_BASE_URL/api/v1/analytics/reports/generate" \
  -H "Content-Type: application/json" \
  -d '{"run_ids": ["test-run"], "report_type": "summary", "format": "json"}' \
  -w "\n%{http_code}" || echo -e "\n000")

report_http_code=$(echo "$report_response" | tail -n1)
if [[ "$report_http_code" == "200" ]]; then
    echo -e "  ‚úÖ Report Generation: ${GREEN}$report_http_code OK${NC}"
elif [[ "$report_http_code" == "404" ]]; then
    echo -e "  ‚ö†Ô∏è  Report Generation: ${YELLOW}$report_http_code Not Found${NC} (endpoint may not be implemented yet)"
else
    echo -e "  ‚ùå Report Generation: ${RED}$report_http_code Error${NC}"
fi
echo

# Test OpenSearch Connection
echo -e "${BLUE}üîç OpenSearch Integration${NC}"
print_status "Testing OpenSearch connection..."
opensearch_response=$(curl -s "http://localhost:9200/_cluster/health" || echo "error")
if [[ "$opensearch_response" != "error" ]]; then
    cluster_status=$(echo "$opensearch_response" | jq -r '.status' 2>/dev/null || echo "unknown")
    echo -e "  ‚úÖ OpenSearch: ${GREEN}Connected${NC} (Status: $cluster_status)"
else
    echo -e "  ‚ùå OpenSearch: ${RED}Not accessible${NC}"
fi

# Test Ollama Connection
print_status "Testing Ollama connection..."
ollama_response=$(curl -s "http://localhost:11434/api/tags" || echo "error")
if [[ "$ollama_response" != "error" ]]; then
    echo -e "  ‚úÖ Ollama: ${GREEN}Connected${NC}"
    models=$(echo "$ollama_response" | jq -r '.models[].name' 2>/dev/null || echo "No models found")
    echo -e "  üìã Available models: $models"
else
    echo -e "  ‚ùå Ollama: ${RED}Not accessible${NC}"
fi
echo

# Summary
echo -e "${BLUE}üìä Test Summary${NC}"
echo -e "${BLUE}==============${NC}"
print_status "API Testing completed!"
echo
print_status "üí° Next steps:"
echo -e "   1. Visit ${GREEN}http://localhost:8080/docs${NC} for interactive API documentation"
echo -e "   2. Check ${GREEN}http://localhost:5601${NC} for OpenSearch Dashboards"
echo -e "   3. Monitor logs with: ${YELLOW}docker-compose -f docker/docker-compose.yml logs -f api${NC}"
echo -e "   4. Test penetration testing endpoints via the API documentation"
echo
