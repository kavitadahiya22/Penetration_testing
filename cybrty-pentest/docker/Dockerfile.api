# Multi-stage Dockerfile for production deployment
FROM python:3.11-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.11-slim as production

# Install runtime dependencies and pentesting tools
RUN apt-get update && apt-get install -y \
    nmap \
    curl \
    wget \
    git \
    dnsutils \
    netcat-traditional \
    && rm -rf /var/lib/apt/lists/*

# Install additional tools (optional - comment out if not needed)
# RUN wget -O /tmp/amass.zip https://github.com/OWASP/Amass/releases/download/v3.23.3/amass_linux_amd64.zip && \
#     unzip /tmp/amass.zip -d /tmp && \
#     mv /tmp/amass_linux_amd64/amass /usr/local/bin/ && \
#     rm -rf /tmp/amass*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create non-root user
RUN groupadd -r pentest && useradd -r -g pentest pentest

# Create application directory
WORKDIR /app

# Copy application code
COPY app/ ./app/
COPY config/ ./config/

# Create artifacts directory
RUN mkdir -p /data/artifacts && chown -R pentest:pentest /data

# Switch to non-root user
USER pentest

# Expose port
EXPOSE 8000

# Set environment variables
ENV PYTHONPATH=/app
ENV CONFIG_PATH=/app/config/config.yaml

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/healthz || exit 1

# Run application
CMD ["python", "-m", "app"]
