"""Nikto web vulnerability scanner agent."""

from datetime import datetime
from typing import Any, Dict

import structlog

from .utils import parse_nikto_output, run_command_with_artifacts

logger = structlog.get_logger(__name__)


class NiktoAgent:
    """Nikto web vulnerability scanning agent."""

    def __init__(self, binary_path: str = "nikto"):
        """Initialize Nikto agent."""
        self.binary_path = binary_path

    async def scan(
        self,
        target: str,
        artifacts_dir: str = "/tmp",
        run_id: str = "test",
        step_id: str = "nikto1",
        simulate: bool = True
    ) -> Dict[str, Any]:
        """Perform Nikto vulnerability scan on target."""
        started_at = datetime.utcnow()
        
        try:
            # Validate target
            if not target or not isinstance(target, str):
                return {
                    "status": "error",
                    "agent": "web",
                    "tool": "nikto",
                    "params": {"target": target},
                    "summary": {"error": "Invalid target provided"},
                    "artifacts": {},
                    "started_at": started_at.isoformat(),
                    "ended_at": datetime.utcnow().isoformat(),
                    "duration_ms": 0
                }

            # Build command
            command = [self.binary_path, "-h", target, "-Format", "txt"]

            logger.info("Running Nikto scan", target=target, simulate=simulate)

            # Run command
            returncode, stdout, stderr, artifacts = await run_command_with_artifacts(
                command=command,
                artifacts_dir=artifacts_dir,
                run_id=run_id,
                step_id=step_id,
                timeout=600  # 10 minutes max
            )

            ended_at = datetime.utcnow()
            duration_ms = int((ended_at - started_at).total_seconds() * 1000)

            # Parse results
            if returncode == 0:
                summary = parse_nikto_output(stdout)
                status = "success"
            else:
                summary = {
                    "error": f"Nikto failed with return code {returncode}",
                    "stderr": stderr,
                    "target": target,
                    "findings": [],
                    "total_findings": 0
                }
                status = "error"

            return {
                "status": status,
                "agent": "web",
                "tool": "nikto",
                "params": {"target": target},
                "summary": summary,
                "artifacts": artifacts,
                "started_at": started_at.isoformat(),
                "ended_at": ended_at.isoformat(),
                "duration_ms": duration_ms
            }

        except Exception as e:
            ended_at = datetime.utcnow()
            duration_ms = int((ended_at - started_at).total_seconds() * 1000)
            logger.error("Nikto scan failed", target=target, error=str(e))
            
            return {
                "status": "error",
                "agent": "web",
                "tool": "nikto",
                "params": {"target": target},
                "summary": {"error": str(e)},
                "artifacts": {},
                "started_at": started_at.isoformat(),
                "ended_at": ended_at.isoformat(),
                "duration_ms": duration_ms
            }
