"""Nuclei vulnerability scanner agent."""

from datetime import datetime
from typing import Any, Dict

import structlog

from .utils import run_command_with_artifacts

logger = structlog.get_logger(__name__)


class NucleiAgent:
    """Nuclei vulnerability scanning agent."""

    def __init__(self, binary_path: str = "nuclei"):
        """Initialize Nuclei agent."""
        self.binary_path = binary_path

    async def scan(
        self,
        target: str,
        templates: str = "cves",
        artifacts_dir: str = "/tmp",
        run_id: str = "test",
        step_id: str = "nuclei1",
        simulate: bool = True
    ) -> Dict[str, Any]:
        """Perform Nuclei vulnerability scan."""
        started_at = datetime.utcnow()
        
        try:
            command = [
                self.binary_path,
                "-u", target,
                "-t", templates,
                "-json"
            ]

            if simulate:
                command.extend(["-rate-limit", "1"])  # Slow rate for simulation

            logger.info("Running Nuclei scan", target=target, templates=templates, simulate=simulate)

            returncode, stdout, stderr, artifacts = await run_command_with_artifacts(
                command=command,
                artifacts_dir=artifacts_dir,
                run_id=run_id,
                step_id=step_id,
                timeout=300
            )

            ended_at = datetime.utcnow()
            duration_ms = int((ended_at - started_at).total_seconds() * 1000)

            summary = {
                "target": target,
                "templates": templates,
                "vulnerabilities": [],
                "total_findings": 0
            }

            if returncode == 0:
                # Count findings in JSON output
                findings = stdout.count('"template-id"')
                summary["total_findings"] = findings
                status = "success"
            else:
                summary["error"] = f"Nuclei failed with return code {returncode}"
                status = "error"

            return {
                "status": status,
                "agent": "vuln",
                "tool": "nuclei",
                "params": {"target": target, "templates": templates},
                "summary": summary,
                "artifacts": artifacts,
                "started_at": started_at.isoformat(),
                "ended_at": ended_at.isoformat(),
                "duration_ms": duration_ms
            }

        except Exception as e:
            ended_at = datetime.utcnow()
            duration_ms = int((ended_at - started_at).total_seconds() * 1000)
            logger.error("Nuclei scan failed", target=target, error=str(e))
            
            return {
                "status": "error",
                "agent": "vuln", 
                "tool": "nuclei",
                "params": {"target": target, "templates": templates},
                "summary": {"error": str(e)},
                "artifacts": {},
                "started_at": started_at.isoformat(),
                "ended_at": ended_at.isoformat(),
                "duration_ms": duration_ms
            }
