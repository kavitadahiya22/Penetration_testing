"""Hydra brute force testing agent."""

from datetime import datetime
from typing import Any, Dict, List

import structlog

from .utils import run_command_with_artifacts

logger = structlog.get_logger(__name__)


class HydraAgent:
    """Hydra brute force testing agent."""

    def __init__(self, binary_path: str = "hydra"):
        """Initialize Hydra agent."""
        self.binary_path = binary_path

    async def bruteforce(
        self,
        users: List[str],
        wordlist: str,
        hosts: List[str],
        service: str = "ssh",
        artifacts_dir: str = "/tmp",
        run_id: str = "test",
        step_id: str = "hydra1",
        simulate: bool = True,
        exploit_simulation: bool = False
    ) -> Dict[str, Any]:
        """Perform brute force attack simulation."""
        started_at = datetime.utcnow()
        
        try:
            # Safety check - only proceed if explicitly allowed
            if not simulate or not exploit_simulation:
                return {
                    "status": "blocked",
                    "agent": "creds",
                    "tool": "hydra",
                    "params": {"users": users, "wordlist": wordlist, "hosts": hosts, "service": service},
                    "summary": {
                        "error": "Brute force attacks blocked by policy",
                        "note": "Enable exploit_simulation in policy and set simulate=true to run"
                    },
                    "artifacts": {},
                    "started_at": started_at.isoformat(),
                    "ended_at": datetime.utcnow().isoformat(),
                    "duration_ms": 0
                }

            # Validate inputs
            if not users or not hosts:
                return {
                    "status": "error",
                    "agent": "creds",
                    "tool": "hydra",
                    "params": {"users": users, "wordlist": wordlist, "hosts": hosts, "service": service},
                    "summary": {"error": "Users and hosts must be provided"},
                    "artifacts": {},
                    "started_at": started_at.isoformat(),
                    "ended_at": datetime.utcnow().isoformat(),
                    "duration_ms": 0
                }

            # Build safe command with rate limiting
            command = [
                self.binary_path,
                "-L", ",".join(users),  # User list
                "-P", wordlist,         # Password list
                "-t", "1",              # Single thread for safety
                "-W", "60",             # 60 second timeout
                "-f",                   # Stop on first success
                "-v"                    # Verbose output
            ]
            
            # Add targets
            for host in hosts:
                command.extend([f"{host}", service])

            logger.info(
                "Running Hydra brute force (simulation)",
                users=len(users),
                hosts=len(hosts),
                service=service,
                simulate=simulate
            )

            # Run command with timeout
            returncode, stdout, stderr, artifacts = await run_command_with_artifacts(
                command=command,
                artifacts_dir=artifacts_dir,
                run_id=run_id,
                step_id=step_id,
                timeout=300  # 5 minutes max for simulation
            )

            ended_at = datetime.utcnow()
            duration_ms = int((ended_at - started_at).total_seconds() * 1000)

            # Parse results
            summary = {
                "service": service,
                "users_tested": len(users),
                "hosts_tested": len(hosts),
                "credentials_found": [],
                "total_findings": 0,
                "simulation_mode": True
            }

            if returncode == 0:
                # Parse Hydra output for successful logins
                lines = stdout.split('\n')
                for line in lines:
                    if "login:" in line and "password:" in line:
                        summary["credentials_found"].append(line.strip())
                        summary["total_findings"] += 1
                status = "success"
            else:
                summary["error"] = f"Hydra failed with return code {returncode}"
                summary["stderr"] = stderr
                status = "error"

            return {
                "status": status,
                "agent": "creds",
                "tool": "hydra",
                "params": {"users": users, "wordlist": wordlist, "hosts": hosts, "service": service},
                "summary": summary,
                "artifacts": artifacts,
                "started_at": started_at.isoformat(),
                "ended_at": ended_at.isoformat(),
                "duration_ms": duration_ms
            }

        except Exception as e:
            ended_at = datetime.utcnow()
            duration_ms = int((ended_at - started_at).total_seconds() * 1000)
            logger.error("Hydra brute force failed", service=service, error=str(e))
            
            return {
                "status": "error",
                "agent": "creds",
                "tool": "hydra",
                "params": {"users": users, "wordlist": wordlist, "hosts": hosts, "service": service},
                "summary": {"error": str(e)},
                "artifacts": {},
                "started_at": started_at.isoformat(),
                "ended_at": ended_at.isoformat(),
                "duration_ms": duration_ms
            }
