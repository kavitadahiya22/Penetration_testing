"""CrackMapExec lateral movement agent."""

from datetime import datetime
from typing import Any, Dict, List

import structlog

from .utils import run_command_with_artifacts

logger = structlog.get_logger(__name__)


class CrackMapExecAgent:
    """CrackMapExec lateral movement and enumeration agent."""

    def __init__(self, binary_path: str = "crackmapexec"):
        """Initialize CrackMapExec agent."""
        self.binary_path = binary_path

    async def enumerate(
        self,
        targets: List[str],
        protocol: str = "smb",
        action: str = "enum",
        artifacts_dir: str = "/tmp",
        run_id: str = "test",
        step_id: str = "cme1",
        simulate: bool = True,
        exploit_simulation: bool = False
    ) -> Dict[str, Any]:
        """Perform CME enumeration."""
        started_at = datetime.utcnow()
        
        try:
            # Safety check
            if not simulate or not exploit_simulation:
                return {
                    "status": "blocked",
                    "agent": "lateral",
                    "tool": "crackmapexec",
                    "params": {"targets": targets, "protocol": protocol, "action": action},
                    "summary": {
                        "error": "CME operations blocked by policy",
                        "note": "Enable exploit_simulation in policy to run"
                    },
                    "artifacts": {},
                    "started_at": started_at.isoformat(),
                    "ended_at": datetime.utcnow().isoformat(),
                    "duration_ms": 0
                }

            command = [self.binary_path, protocol]
            command.extend(targets)
            
            if action == "enum":
                command.extend(["--shares"])

            logger.info("Running CrackMapExec enumeration", targets=targets, protocol=protocol, simulate=simulate)

            returncode, stdout, stderr, artifacts = await run_command_with_artifacts(
                command=command,
                artifacts_dir=artifacts_dir,
                run_id=run_id,
                step_id=step_id,
                timeout=300
            )

            ended_at = datetime.utcnow()
            duration_ms = int((ended_at - started_at).total_seconds() * 1000)

            summary = {
                "protocol": protocol,
                "targets_tested": len(targets),
                "shares_found": [],
                "hosts_accessible": [],
                "total_findings": 0,
                "simulation_mode": True
            }

            if returncode == 0:
                # Parse CME output
                lines = stdout.split('\n')
                for line in lines:
                    if "STATUS_SUCCESS" in line:
                        summary["hosts_accessible"].append(line.strip())
                        summary["total_findings"] += 1
                status = "success"
            else:
                summary["error"] = f"CrackMapExec failed with return code {returncode}"
                status = "error"

            return {
                "status": status,
                "agent": "lateral",
                "tool": "crackmapexec",
                "params": {"targets": targets, "protocol": protocol, "action": action},
                "summary": summary,
                "artifacts": artifacts,
                "started_at": started_at.isoformat(),
                "ended_at": ended_at.isoformat(),
                "duration_ms": duration_ms
            }

        except Exception as e:
            ended_at = datetime.utcnow()
            duration_ms = int((ended_at - started_at).total_seconds() * 1000)
            logger.error("CrackMapExec failed", protocol=protocol, error=str(e))
            
            return {
                "status": "error",
                "agent": "lateral",
                "tool": "crackmapexec",
                "params": {"targets": targets, "protocol": protocol, "action": action},
                "summary": {"error": str(e)},
                "artifacts": {},
                "started_at": started_at.isoformat(),
                "ended_at": ended_at.isoformat(),
                "duration_ms": duration_ms
            }
