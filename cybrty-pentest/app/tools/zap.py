"""ZAP web application security testing agent."""

from datetime import datetime
from typing import Any, Dict

import httpx
import structlog

from .utils import run_command_with_artifacts

logger = structlog.get_logger(__name__)


class ZAPAgent:
    """ZAP web application security testing agent."""

    def __init__(self, zap_api_url: str = "http://zap:8080"):
        """Initialize ZAP agent."""
        self.zap_api_url = zap_api_url.rstrip('/')

    async def baseline_scan(
        self,
        target: str,
        artifacts_dir: str = "/tmp",
        run_id: str = "test",
        step_id: str = "zap1",
        simulate: bool = True
    ) -> Dict[str, Any]:
        """Perform ZAP baseline scan on target."""
        started_at = datetime.utcnow()
        
        try:
            # Validate target
            if not target or not isinstance(target, str):
                return {
                    "status": "error",
                    "agent": "web",
                    "tool": "zap",
                    "params": {"target": target, "baseline": True},
                    "summary": {"error": "Invalid target provided"},
                    "artifacts": {},
                    "started_at": started_at.isoformat(),
                    "ended_at": datetime.utcnow().isoformat(),
                    "duration_ms": 0
                }

            # Try API first, fall back to CLI
            result = await self._try_api_scan(target, artifacts_dir, run_id, step_id, simulate)
            if result:
                return result

            # Fall back to CLI
            return await self._cli_scan(target, artifacts_dir, run_id, step_id, simulate)

        except Exception as e:
            ended_at = datetime.utcnow()
            duration_ms = int((ended_at - started_at).total_seconds() * 1000)
            logger.error("ZAP scan failed", target=target, error=str(e))
            
            return {
                "status": "error",
                "agent": "web",
                "tool": "zap",
                "params": {"target": target, "baseline": True},
                "summary": {"error": str(e)},
                "artifacts": {},
                "started_at": started_at.isoformat(),
                "ended_at": ended_at.isoformat(),
                "duration_ms": duration_ms
            }

    async def _try_api_scan(
        self,
        target: str,
        artifacts_dir: str,
        run_id: str,
        step_id: str,
        simulate: bool
    ) -> Dict[str, Any]:
        """Try to use ZAP API for scanning."""
        try:
            async with httpx.AsyncClient() as client:
                # Check if ZAP is available
                health_response = await client.get(f"{self.zap_api_url}/JSON/core/view/version/", timeout=10.0)
                if health_response.status_code != 200:
                    return None

                logger.info("Using ZAP API for baseline scan", target=target, simulate=simulate)

                # Start spider scan
                spider_response = await client.get(
                    f"{self.zap_api_url}/JSON/spider/action/scan/",
                    params={"url": target, "maxChildren": "10" if simulate else "100"},
                    timeout=30.0
                )

                if spider_response.status_code == 200:
                    scan_data = spider_response.json()
                    scan_id = scan_data.get("scan", "0")

                    # Wait for spider to complete (simplified)
                    await asyncio.sleep(30)  # Wait 30 seconds for baseline

                    # Get results
                    alerts_response = await client.get(
                        f"{self.zap_api_url}/JSON/core/view/alerts/",
                        params={"baseurl": target},
                        timeout=30.0
                    )

                    ended_at = datetime.utcnow()
                    duration_ms = int((ended_at - datetime.utcnow()).total_seconds() * 1000)

                    if alerts_response.status_code == 200:
                        alerts_data = alerts_response.json()
                        alerts = alerts_data.get("alerts", [])

                        summary = {
                            "target": target,
                            "alerts": len(alerts),
                            "total_findings": len(alerts),
                            "high_risk": len([a for a in alerts if a.get("risk") == "High"]),
                            "medium_risk": len([a for a in alerts if a.get("risk") == "Medium"]),
                            "low_risk": len([a for a in alerts if a.get("risk") == "Low"]),
                            "informational": len([a for a in alerts if a.get("risk") == "Informational"])
                        }

                        return {
                            "status": "success",
                            "agent": "web",
                            "tool": "zap",
                            "params": {"target": target, "baseline": True},
                            "summary": summary,
                            "artifacts": {"api_results": f"ZAP API scan of {target}"},
                            "started_at": datetime.utcnow().isoformat(),
                            "ended_at": ended_at.isoformat(),
                            "duration_ms": duration_ms
                        }

        except Exception as e:
            logger.debug("ZAP API not available, falling back to CLI", error=str(e))
            return None

    async def _cli_scan(
        self,
        target: str,
        artifacts_dir: str,
        run_id: str,
        step_id: str,
        simulate: bool
    ) -> Dict[str, Any]:
        """Use ZAP CLI for scanning."""
        started_at = datetime.utcnow()

        # Build baseline command
        command = [
            "docker", "run", "--rm",
            "-v", f"{artifacts_dir}/{run_id}/{step_id}:/zap/wrk/:rw",
            "owasp/zap2docker-stable",
            "zap-baseline.py",
            "-t", target,
            "-J", "zap-report.json",
            "-r", "zap-report.html"
        ]

        if simulate:
            command.extend(["-l", "PASS"])  # Only PASS level alerts in simulation

        logger.info("Running ZAP CLI baseline scan", target=target, simulate=simulate)

        # Run command
        returncode, stdout, stderr, artifacts = await run_command_with_artifacts(
            command=command,
            artifacts_dir=artifacts_dir,
            run_id=run_id,
            step_id=step_id,
            timeout=600  # 10 minutes max
        )

        ended_at = datetime.utcnow()
        duration_ms = int((ended_at - started_at).total_seconds() * 1000)

        # Parse results
        summary = {
            "target": target,
            "method": "cli",
            "total_findings": 0
        }

        if returncode in [0, 1, 2]:  # ZAP returns 2 for warnings, which is normal
            # Try to parse basic info from stdout
            if "FAIL-NEW" in stdout:
                summary["total_findings"] = stdout.count("FAIL-NEW")
            elif "WARN-NEW" in stdout:
                summary["total_findings"] = stdout.count("WARN-NEW")
            status = "success"
        else:
            summary["error"] = f"ZAP failed with return code {returncode}"
            summary["stderr"] = stderr
            status = "error"

        return {
            "status": status,
            "agent": "web",
            "tool": "zap",
            "params": {"target": target, "baseline": True},
            "summary": summary,
            "artifacts": artifacts,
            "started_at": started_at.isoformat(),
            "ended_at": ended_at.isoformat(),
            "duration_ms": duration_ms
        }
