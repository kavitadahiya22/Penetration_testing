"""CrewAI task templates for pentesting workflows."""

from typing import Dict, Any, List


class TaskTemplates:
    """Task templates for CrewAI agents."""
    
    @staticmethod
    def create_recon_task(targets: List[str], params: Dict[str, Any]) -> Dict[str, Any]:
        """Create reconnaissance task."""
        return {
            "description": f"""
            Perform comprehensive reconnaissance on targets: {', '.join(targets)}
            
            Requirements:
            1. Use passive reconnaissance techniques first (Amass)
            2. Perform service discovery and port scanning (Nmap)
            3. Identify live hosts and running services
            4. Document findings in structured format
            5. Respect rate limits and target network policies
            
            Tools available: amass, nmap
            Parameters: {params}
            
            Output: Detailed reconnaissance report with discovered hosts, services, and potential attack vectors.
            """,
            "expected_output": "JSON report containing discovered hosts, services, ports, and reconnaissance summary",
            "agent": "recon"
        }
    
    @staticmethod
    def create_web_task(urls: List[str], params: Dict[str, Any]) -> Dict[str, Any]:
        """Create web application testing task."""
        return {
            "description": f"""
            Perform comprehensive web application security testing on: {', '.join(urls)}
            
            Requirements:
            1. Run baseline security scans (ZAP)
            2. Perform directory and file discovery (Nikto)
            3. Test for SQL injection vulnerabilities (SQLMap - safe mode)
            4. Document all findings with risk ratings
            5. Maintain session state if authentication provided
            
            Tools available: zap, nikto, sqlmap
            Parameters: {params}
            
            Output: Comprehensive web security assessment report.
            """,
            "expected_output": "JSON report containing discovered vulnerabilities, risk ratings, and remediation recommendations",
            "agent": "web"
        }
    
    @staticmethod
    def create_exploit_task(target: str, params: Dict[str, Any]) -> Dict[str, Any]:
        """Create exploitation task."""
        return {
            "description": f"""
            Safely validate vulnerabilities on target: {target}
            
            Requirements:
            1. Only proceed if simulate=true and policy allows
            2. Use Metasploit for controlled vulnerability validation
            3. Document exploitation attempts and results
            4. Maintain detailed logs for all activities
            5. Respect engagement boundaries and authorization
            
            Tools available: metasploit
            Parameters: {params}
            
            CRITICAL: Only simulate unless explicitly authorized for live testing.
            
            Output: Exploitation assessment report with validation results.
            """,
            "expected_output": "JSON report containing exploitation attempts, success/failure status, and security impact assessment",
            "agent": "exploit"
        }
    
    @staticmethod
    def create_creds_task(targets: List[str], params: Dict[str, Any]) -> Dict[str, Any]:
        """Create credential testing task."""
        return {
            "description": f"""
            Safely assess credential security on targets: {', '.join(targets)}
            
            Requirements:
            1. Use rate-limited credential testing (Hydra)
            2. Perform safe enumeration (CrackMapExec)
            3. Avoid account lockouts through proper timing
            4. Document weak credentials and authentication issues
            5. Default to simulation mode unless explicitly authorized
            
            Tools available: hydra, crackmapexec
            Parameters: {params}
            
            Output: Credential security assessment report.
            """,
            "expected_output": "JSON report containing credential testing results, weak passwords found, and authentication security posture",
            "agent": "creds"
        }
    
    @staticmethod
    def create_lateral_task(domain: str, params: Dict[str, Any]) -> Dict[str, Any]:
        """Create lateral movement analysis task."""
        return {
            "description": f"""
            Analyze lateral movement opportunities in domain: {domain}
            
            Requirements:
            1. Process BloodHound data or perform live enumeration
            2. Map privilege relationships and group memberships
            3. Identify high-value targets and attack paths
            4. Use safe enumeration techniques (CrackMapExec)
            5. Generate movement path recommendations
            
            Tools available: bloodhound, crackmapexec
            Parameters: {params}
            
            Output: Lateral movement analysis report with attack path recommendations.
            """,
            "expected_output": "JSON report containing lateral movement paths, privilege escalation opportunities, and domain security assessment",
            "agent": "lateral"
        }
    
    @staticmethod
    def create_privesc_task(targets: List[str], params: Dict[str, Any]) -> Dict[str, Any]:
        """Create privilege escalation analysis task."""
        return {
            "description": f"""
            Analyze privilege escalation opportunities on targets: {', '.join(targets)}
            
            Requirements:
            1. Analyze BloodHound data for escalation paths
            2. Check for common misconfigurations
            3. Identify service account vulnerabilities
            4. Map delegation relationships
            5. Suggest escalation vectors without exploitation
            
            Tools available: bloodhound, crackmapexec
            Parameters: {params}
            
            Output: Privilege escalation analysis report.
            """,
            "expected_output": "JSON report containing privilege escalation paths, vulnerable configurations, and escalation recommendations",
            "agent": "priv-esc"
        }
    
    @classmethod
    def create_task_by_agent(cls, agent: str, targets: List[str], params: Dict[str, Any]) -> Dict[str, Any]:
        """Create task by agent type."""
        task_creators = {
            "recon": cls.create_recon_task,
            "web": cls.create_web_task,
            "exploit": cls.create_exploit_task,
            "creds": cls.create_creds_task,
            "lateral": cls.create_lateral_task,
            "priv-esc": cls.create_privesc_task
        }
        
        if agent not in task_creators:
            raise ValueError(f"Unknown agent type: {agent}")
        
        if agent == "exploit":
            return task_creators[agent](targets[0] if targets else "", params)
        elif agent in ["lateral", "priv-esc"] and "domain" in params:
            return task_creators[agent](params["domain"], params)
        elif agent == "web" and "urls" in params:
            return task_creators[agent](params["urls"], params)
        else:
            return task_creators[agent](targets, params)
