"""Configuration management with YAML loading and environment variable overrides."""

import os
from pathlib import Path
from typing import Any, Dict, List, Optional

import yaml
from pydantic import BaseModel, Field
from pydantic_settings import BaseSettings


class ServerConfig(BaseModel):
    """Server configuration."""
    host: str = "0.0.0.0"
    port: int = 8080


class ModelConfig(BaseModel):
    """AI model provider configuration."""
    provider: str = "ollama"  # "ollama" | "openai"
    model_name: str = "deepseek-coder"
    api_base: str = "http://ollama:11434"
    api_key_env: str = "OPENAI_API_KEY"


class OpenSearchConfig(BaseModel):
    """OpenSearch configuration."""
    scheme: str = "http"
    host: str = "opensearch"
    port: int = 9200
    username: Optional[str] = None
    password: Optional[str] = None
    index_runs: str = "cybrty-runs"
    index_actions: str = "cybrty-actions"


class BinariesConfig(BaseModel):
    """Tool binary paths configuration."""
    nmap: str = "nmap"
    amass: str = "amass"
    nuclei: str = "nuclei"
    sqlmap: str = "sqlmap"
    hydra: str = "hydra"
    cme: str = "crackmapexec"
    nikto: str = "nikto"


class MetasploitRPCConfig(BaseModel):
    """Metasploit RPC configuration."""
    host: str = "msfrpcd"
    port: int = 55552
    user: str = "msf"
    pass_env: str = "MSF_RPC_PASSWORD"


class ToolsConfig(BaseModel):
    """Tools configuration."""
    binaries: BinariesConfig = Field(default_factory=BinariesConfig)
    zap_api: str = "http://zap:8080"
    metasploit_rpc: MetasploitRPCConfig = Field(default_factory=MetasploitRPCConfig)


class PolicyConfig(BaseModel):
    """Security policy configuration."""
    allow_networks: List[str] = Field(default_factory=lambda: ["10.0.0.0/8", "192.168.0.0/16"])
    max_host_count: int = 4096
    exploit_simulation: bool = False


class ArtifactsConfig(BaseModel):
    """Artifacts storage configuration."""
    dir: str = "./data/artifacts"


class Settings(BaseSettings):
    """Main application settings."""
    server: ServerConfig = Field(default_factory=ServerConfig)
    model: ModelConfig = Field(default_factory=ModelConfig)
    opensearch: OpenSearchConfig = Field(default_factory=OpenSearchConfig)
    tools: ToolsConfig = Field(default_factory=ToolsConfig)
    policy: PolicyConfig = Field(default_factory=PolicyConfig)
    artifacts: ArtifactsConfig = Field(default_factory=ArtifactsConfig)

    model_config = {
        "env_nested_delimiter": "_",
        "case_sensitive": False
    }

    @classmethod
    def load_from_yaml(cls, config_path: Optional[str] = None) -> "Settings":
        """Load settings from YAML file with environment variable overrides."""
        if config_path is None:
            config_path = os.getenv("CONFIG_PATH", "/app/config/config.yaml")
        
        config_file = Path(config_path)
        if not config_file.exists():
            # Try relative path from app root
            app_root = Path(__file__).parent.parent.parent
            config_file = app_root / "config" / "config.yaml"
        
        if config_file.exists():
            with open(config_file, "r") as f:
                yaml_config = yaml.safe_load(f)
        else:
            yaml_config = {}

        # Apply environment variable overrides
        env_overrides = cls._get_env_overrides()
        config = cls._merge_configs(yaml_config, env_overrides)
        
        return cls(**config)

    @staticmethod
    def _get_env_overrides() -> Dict[str, Any]:
        """Extract configuration overrides from environment variables."""
        overrides = {}
        
        # Model provider overrides
        if model_provider := os.getenv("MODEL_PROVIDER"):
            overrides.setdefault("model", {})["provider"] = model_provider
        if model_name := os.getenv("MODEL_NAME"):
            overrides.setdefault("model", {})["model_name"] = model_name
        if ollama_base_url := os.getenv("OLLAMA_BASE_URL"):
            overrides.setdefault("model", {})["api_base"] = ollama_base_url
        
        # OpenSearch overrides
        if opensearch_host := os.getenv("OPENSEARCH_HOST"):
            overrides.setdefault("opensearch", {})["host"] = opensearch_host
        if opensearch_port := os.getenv("OPENSEARCH_PORT"):
            overrides.setdefault("opensearch", {})["port"] = int(opensearch_port)
        if opensearch_scheme := os.getenv("OPENSEARCH_SCHEME"):
            overrides.setdefault("opensearch", {})["scheme"] = opensearch_scheme
        if opensearch_username := os.getenv("OPENSEARCH_USERNAME"):
            overrides.setdefault("opensearch", {})["username"] = opensearch_username
        if opensearch_password := os.getenv("OPENSEARCH_PASSWORD"):
            overrides.setdefault("opensearch", {})["password"] = opensearch_password
        if opensearch_index_runs := os.getenv("OPENSEARCH_INDEX_RUNS"):
            overrides.setdefault("opensearch", {})["index_runs"] = opensearch_index_runs
        if opensearch_index_actions := os.getenv("OPENSEARCH_INDEX_ACTIONS"):
            overrides.setdefault("opensearch", {})["index_actions"] = opensearch_index_actions
        
        # Artifacts override
        if artifacts_dir := os.getenv("ARTIFACTS_DIR"):
            overrides.setdefault("artifacts", {})["dir"] = artifacts_dir
        
        # Policy overrides
        if policy_allow_nets := os.getenv("POLICY_ALLOW_NETS"):
            networks = [net.strip() for net in policy_allow_nets.split(",")]
            overrides.setdefault("policy", {})["allow_networks"] = networks
        
        return overrides

    @staticmethod
    def _merge_configs(base: Dict[str, Any], overrides: Dict[str, Any]) -> Dict[str, Any]:
        """Recursively merge configuration dictionaries."""
        result = base.copy()
        
        for key, value in overrides.items():
            if key in result and isinstance(result[key], dict) and isinstance(value, dict):
                result[key] = Settings._merge_configs(result[key], value)
            else:
                result[key] = value
        
        return result


def get_settings() -> Settings:
    """Get application settings singleton."""
    return Settings.load_from_yaml()
