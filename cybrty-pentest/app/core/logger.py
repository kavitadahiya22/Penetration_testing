"""OpenSearch client and logging utilities."""

import time
from datetime import datetime
from typing import Any, Dict, List, Optional

import structlog

from .config import OpenSearchConfig, Settings
from .opensearch_client import OpenSearchClient, create_opensearch_client

logger = structlog.get_logger(__name__)


class OpenSearchLogger:
    """OpenSearch client for logging pentesting actions and runs."""

    def __init__(self, config: OpenSearchConfig):
        """Initialize OpenSearch logger with dedicated client."""
        self.config = config
        self.client = create_opensearch_client(config)

    async def ensure_indices(self) -> None:
        """Ensure required indices exist with proper mappings."""
        await self.client.ensure_indices()

    async def log_action(
        self,
        run_id: str,
        step_id: str,
        tenant_id: str,
        agent: str,
        tool: str,
        status: str,
        params: Dict[str, Any],
        summary: Dict[str, Any],
        artifacts: Dict[str, Any],
        started_at: datetime,
        ended_at: datetime,
        duration_ms: int,
        error_message: Optional[str] = None
    ) -> bool:
        """Log a pentesting action to OpenSearch."""
        doc = {
            "run_id": run_id,
            "step_id": step_id,
            "tenant_id": tenant_id,
            "agent": agent,
            "tool": tool,
            "status": status,
            "params": params,
            "summary": summary,
            "artifacts": artifacts,
            "started_at": started_at.isoformat(),
            "ended_at": ended_at.isoformat(),
            "duration_ms": duration_ms,
            "error_message": error_message,
            "@timestamp": datetime.utcnow().isoformat()
        }
        
        return await self.client.index_document(self.config.index_actions, doc)

    async def log_run(
        self,
        run_id: str,
        tenant_id: str,
        status: str,
        plan_id: str,
        steps_count: int,
        started_at: datetime,
        ended_at: Optional[datetime] = None,
        artifacts: Optional[List[str]] = None,
        summary: Optional[Dict[str, Any]] = None,
        # Additional parameters for backward compatibility with executor
        total_findings: Optional[int] = None,
        severity: Optional[str] = None,
        duration_ms: Optional[int] = None,
        features: Optional[List[str]] = None,
        depth: Optional[str] = None,
        simulate: Optional[bool] = None
    ) -> bool:
        """Log a pentesting run to OpenSearch."""
        doc = {
            "run_id": run_id,
            "tenant_id": tenant_id,
            "status": status,
            "plan_id": plan_id,
            "steps_count": steps_count,
            "started_at": started_at.isoformat(),
            "ended_at": ended_at.isoformat() if ended_at else None,
            "artifacts": artifacts or [],
            "summary": summary or {},
            "@timestamp": datetime.utcnow().isoformat()
        }
        
        # Add optional fields if provided (backward compatibility)
        if total_findings is not None:
            doc["total_findings"] = total_findings
        if severity is not None:
            doc["severity"] = severity
        if duration_ms is not None:
            doc["duration_ms"] = duration_ms
        if features is not None:
            doc["features"] = features
        if depth is not None:
            doc["depth"] = depth
        if simulate is not None:
            doc["simulate"] = simulate
        
        return await self.client.index_document(self.config.index_runs, doc, doc_id=run_id)

    async def get_run_status(self, run_id: str) -> Optional[Dict[str, Any]]:
        """Get run status from OpenSearch."""
        # Try to get the run document
        run_doc = await self.client.get_document(self.config.index_runs, run_id)
        
        if not run_doc:
            return None
        
        # Get associated actions
        actions_query = {
            "query": {
                "term": {"run_id.keyword": run_id}
            },
            "sort": [{"started_at": "asc"}],
            "size": 100
        }
        
        actions = await self.client.search_documents(self.config.index_actions, actions_query)
        
        # Format response
        return {
            "run_id": run_id,
            "status": run_doc.get("status", "unknown"),
            "progress": {
                "current": len([a for a in actions if a.get("status") == "completed"]),
                "total": run_doc.get("steps_count", 0)
            },
            "steps": [
                {
                    "step_id": action.get("step_id"),
                    "agent": action.get("agent"),
                    "tool": action.get("tool"),
                    "status": action.get("status"),
                    "started_at": action.get("started_at"),
                    "ended_at": action.get("ended_at"),
                    "duration_ms": action.get("duration_ms")
                }
                for action in actions
            ],
            "artifacts": run_doc.get("artifacts", []),
            "summary": run_doc.get("summary", {})
        }

    async def health_check(self) -> bool:
        """Check OpenSearch health."""
        return await self.client.health_check()

    async def close(self) -> None:
        """Close the OpenSearch client connection."""
        await self.client.close()

    def is_available(self) -> bool:
        """Check if OpenSearch client is available."""
        return self.client.is_available()


# Dependency injection helpers
def get_opensearch_logger(settings: Settings) -> OpenSearchLogger:
    """Get OpenSearch logger instance."""
    return OpenSearchLogger(settings.opensearch)


async def setup_opensearch_logger(settings: Settings) -> OpenSearchLogger:
    """Setup OpenSearch logger with indices."""
    logger_instance = get_opensearch_logger(settings)
    await logger_instance.ensure_indices()
    return logger_instance
