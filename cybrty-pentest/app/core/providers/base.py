"""Base model provider interface."""

from abc import ABC, abstractmethod
from typing import Any, Dict, List


class ModelProvider(ABC):
    """Abstract base class for AI model providers."""

    @abstractmethod
    async def generate_plan(
        self,
        targets: List[str],
        depth: str,
        features: List[str],
        simulate: bool,
        tenant_id: str,
        **kwargs
    ) -> Dict[str, Any]:
        """Generate a pentesting plan based on inputs."""
        pass

    @abstractmethod
    async def health_check(self) -> bool:
        """Check if the model provider is healthy."""
        pass

    @abstractmethod
    def get_provider_name(self) -> str:
        """Get the name of the provider."""
        pass
