"""Model manager for handling multiple AI providers and easy switching."""

import os
import subprocess
from typing import Optional, Dict, Any, List
from datetime import datetime

from .config import Settings


class ModelManager:
    """Manages AI model providers and provides utilities for switching between them."""
    
    def __init__(self, settings: Settings):
        """Initialize model manager."""
        self.settings = settings
        
    def get_current_provider_info(self) -> Dict[str, Any]:
        """Get information about current provider configuration."""
        provider = self.settings.model.provider
        
        info = {
            "provider": provider,
            "model_name": self.settings.model.model_name,
            "api_base": self.settings.model.api_base,
            "timestamp": datetime.utcnow().isoformat()
        }
        
        if provider == "ollama":
            info.update({
                "ollama_url": self.settings.model.ollama_base_url,
                "ollama_model": self.settings.model.ollama_model,
                "requires_api_key": False
            })
        elif provider == "openai":
            info.update({
                "openai_model": self.settings.model.openai_model,
                "openai_api_base": self.settings.model.openai_api_base,
                "requires_api_key": True,
                "api_key_env": self.settings.model.openai_api_key_env,
                "api_key_set": bool(os.getenv(self.settings.model.openai_api_key_env))
            })
        elif provider == "azure-openai":
            info.update({
                "azure_endpoint": self.settings.model.azure_openai_endpoint,
                "azure_deployment": self.settings.model.azure_openai_deployment,
                "azure_api_version": self.settings.model.azure_openai_api_version,
                "requires_api_key": True,
                "api_key_env": self.settings.model.azure_openai_api_key_env,
                "api_key_set": bool(os.getenv(self.settings.model.azure_openai_api_key_env))
            })
            
        return info
    
    def check_ollama_status(self) -> Dict[str, Any]:
        """Check Ollama installation and running status."""
        status = {
            "installed": False,
            "running": False,
            "version": None,
            "models": [],
            "errors": []
        }
        
        try:
            # Check if ollama command exists
            result = subprocess.run(
                ["ollama", "--version"], 
                capture_output=True, 
                text=True, 
                timeout=5
            )
            if result.returncode == 0:
                status["installed"] = True
                status["version"] = result.stdout.strip()
            else:
                status["errors"].append(f"Ollama command failed: {result.stderr}")
                
        except FileNotFoundError:
            status["errors"].append("Ollama not found in PATH")
        except subprocess.TimeoutExpired:
            status["errors"].append("Ollama command timed out")
        except Exception as e:
            status["errors"].append(f"Error checking Ollama: {e}")
            
        if status["installed"]:
            try:
                # Check if ollama server is running
                result = subprocess.run(
                    ["ollama", "list"], 
                    capture_output=True, 
                    text=True, 
                    timeout=10
                )
                if result.returncode == 0:
                    status["running"] = True
                    # Parse available models
                    lines = result.stdout.strip().split('\n')
                    if len(lines) > 1:  # Skip header
                        for line in lines[1:]:
                            if line.strip():
                                model_name = line.split()[0]
                                status["models"].append(model_name)
                else:
                    status["errors"].append(f"Ollama server not responding: {result.stderr}")
                    
            except Exception as e:
                status["errors"].append(f"Error checking Ollama models: {e}")
                
        return status
    
    def check_openai_status(self) -> Dict[str, Any]:
        """Check OpenAI API configuration and connectivity."""
        status = {
            "api_key_set": False,
            "api_key_valid": False,
            "models_available": [],
            "errors": []
        }
        
        api_key = os.getenv(self.settings.model.openai_api_key_env)
        if api_key:
            status["api_key_set"] = True
            
            try:
                # Test API connectivity (you might want to implement this)
                # For now, just check if key looks valid
                if len(api_key) > 20 and api_key.startswith(('sk-', 'sk_')):
                    status["api_key_valid"] = True
                    # Add common OpenAI models
                    status["models_available"] = [
                        "gpt-4-turbo-preview",
                        "gpt-4",
                        "gpt-3.5-turbo",
                        "gpt-3.5-turbo-16k"
                    ]
                else:
                    status["errors"].append("API key format appears invalid")
                    
            except Exception as e:
                status["errors"].append(f"Error validating OpenAI API key: {e}")
        else:
            status["errors"].append(f"OpenAI API key not set in {self.settings.model.openai_api_key_env}")
            
        return status
    
    def get_recommended_setup(self) -> Dict[str, Any]:
        """Get recommended setup based on current environment."""
        ollama_status = self.check_ollama_status()
        openai_status = self.check_openai_status()
        
        recommendations = {
            "current_provider": self.settings.model.provider,
            "recommendations": [],
            "setup_commands": [],
            "environment_variables": []
        }
        
        # Analyze current setup and provide recommendations
        if ollama_status["installed"] and ollama_status["running"]:
            if "deepseek-coder" in ollama_status["models"]:
                recommendations["recommendations"].append(
                    "✅ Ollama with DeepSeek Coder is ready - Great for open source setup!"
                )
            else:
                recommendations["recommendations"].append(
                    "⚠️ Ollama is running but DeepSeek Coder model not found"
                )
                recommendations["setup_commands"].append(
                    "ollama pull deepseek-coder"
                )
        elif ollama_status["installed"]:
            recommendations["recommendations"].append(
                "⚠️ Ollama installed but not running"
            )
            recommendations["setup_commands"].append("ollama serve")
        else:
            recommendations["recommendations"].append(
                "❌ Ollama not installed - Install for open source AI"
            )
            recommendations["setup_commands"].extend([
                "# Install Ollama from https://ollama.ai",
                "ollama pull deepseek-coder"
            ])
            
        if openai_status["api_key_set"] and openai_status["api_key_valid"]:
            recommendations["recommendations"].append(
                "✅ OpenAI API configured and ready"
            )
        elif openai_status["api_key_set"]:
            recommendations["recommendations"].append(
                "⚠️ OpenAI API key set but may be invalid"
            )
        else:
            recommendations["recommendations"].append(
                "ℹ️ OpenAI API not configured - Set API key for cloud AI"
            )
            recommendations["environment_variables"].append(
                f"export {self.settings.model.openai_api_key_env}=your_api_key_here"
            )
            
        return recommendations
    
    def switch_provider(self, provider: str) -> Dict[str, Any]:
        """Switch AI provider and return status."""
        valid_providers = ["ollama", "openai", "azure-openai"]
        
        if provider not in valid_providers:
            return {
                "success": False,
                "error": f"Invalid provider. Must be one of: {valid_providers}"
            }
            
        # Set environment variable for provider switching
        os.environ["MODEL_PROVIDER"] = provider
        
        # Reload settings to pick up the change
        new_settings = Settings.load_from_yaml()
        
        return {
            "success": True,
            "provider": provider,
            "model_name": new_settings.model.model_name,
            "api_base": new_settings.model.api_base,
            "message": f"Switched to {provider} provider"
        }
    
    def _get_timestamp(self) -> str:
        """Get current timestamp in ISO format."""
        return datetime.utcnow().isoformat()
    
    def test_provider_connection(self, provider: str) -> bool:
        """Test connection to the specified provider."""
        try:
            if provider == "ollama":
                # Test Ollama connection
                result = subprocess.run(
                    ["curl", "-s", "http://localhost:11434/api/version"],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                return result.returncode == 0
            elif provider == "openai":
                # Check if API key is set
                api_key = os.getenv("OPENAI_API_KEY")
                return bool(api_key and len(api_key) > 20)
            elif provider == "azure-openai":
                # Check if Azure credentials are set
                endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
                api_key = os.getenv("AZURE_OPENAI_API_KEY")
                deployment = os.getenv("AZURE_OPENAI_DEPLOYMENT")
                return bool(endpoint and api_key and deployment)
            return False
        except Exception:
            return False
    
    def test_crewai_integration(self) -> bool:
        """Test if CrewAI integration is working."""
        try:
            from app.agents.registry import AgentRegistry
            from crewai import Crew, Agent, Task
            
            # Create test registry and crew
            registry = AgentRegistry()
            agents = registry.get_all_agents()
            
            if not agents:
                return False
                
            # Create a simple test crew
            test_agent = next(iter(agents.values()))
            test_task = Task(
                description="Test task",
                agent=test_agent,
                expected_output="Test output"
            )
            
            crew = Crew(
                agents=[test_agent],
                tasks=[test_task],
                verbose=False
            )
            
            return crew is not None
        except Exception:
            return False
    
    def get_provider_switching_guide(self) -> Dict[str, List[str]]:
        """Get guide for switching between providers."""
        return {
            "environment_variables": [
                "# Switch to Ollama (open source)",
                "export MODEL_PROVIDER=ollama",
                "export OLLAMA_MODEL=deepseek-coder",
                "export OLLAMA_BASE_URL=http://localhost:11434",
                "",
                "# Switch to OpenAI", 
                "export MODEL_PROVIDER=openai",
                "export OPENAI_MODEL=gpt-4-turbo-preview",
                "export OPENAI_API_KEY=your_api_key_here",
                "",
                "# Switch to Azure OpenAI",
                "export MODEL_PROVIDER=azure-openai", 
                "export AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/",
                "export AZURE_OPENAI_DEPLOYMENT=your-deployment-name",
                "export AZURE_OPENAI_API_KEY=your_api_key_here"
            ],
            "docker_environment": [
                "# In docker-compose.yml or .env file:",
                "MODEL_PROVIDER=ollama",
                "OLLAMA_BASE_URL=http://ollama:11434",
                "OLLAMA_MODEL=deepseek-coder"
            ],
            "runtime_switching": [
                "# Programmatic switching:",
                "from app.core.model_manager import ModelManager",
                "from app.core.config import Settings",
                "",
                "settings = Settings()",
                "manager = ModelManager(settings)",
                "result = manager.switch_provider('openai')"
            ]
        }


def get_model_manager() -> ModelManager:
    """Get model manager instance."""
    settings = Settings.load_from_yaml()
    return ModelManager(settings)
