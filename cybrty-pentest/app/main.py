"""
Main FastAPI application with AI model management API.
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from contextlib import asynccontextmanager
import os
from pathlib import Path

from app.api.model_api import router as model_router


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan management."""
    # Startup
    print("ðŸš€ Starting AI Model Management API...")
    yield
    # Shutdown
    print("ðŸ›‘ Shutting down AI Model Management API...")


# Create FastAPI app
app = FastAPI(
    title="AI Model Management API",
    description="API for managing and switching between AI providers (Ollama, OpenAI, Azure)",
    version="1.0.0",
    lifespan=lifespan
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure appropriately for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount static files
static_dir = Path(__file__).parent.parent / "static"
if static_dir.exists():
    app.mount("/static", StaticFiles(directory=static_dir), name="static")

# Include routers
app.include_router(model_router)


@app.get("/")
async def root():
    """Serve the web interface."""
    static_file = Path(__file__).parent.parent / "static" / "index.html"
    if static_file.exists():
        return FileResponse(static_file)
    else:
        return {
            "message": "AI Model Management API",
            "version": "1.0.0",
            "docs": "/docs",
            "openapi": "/openapi.json",
            "endpoints": {
                "models": "/api/v1/models",
                "status": "/api/v1/models/status",
                "switch": "/api/v1/models/switch",
                "presets": "/api/v1/models/presets"
            }
        }


@app.get("/health")
async def health():
    """Health check endpoint."""
    return {"status": "healthy", "service": "ai-model-api"}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
