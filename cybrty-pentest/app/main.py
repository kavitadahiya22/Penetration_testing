"""
Main FastAPI application with AI model management API.
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from contextlib import asynccontextmanager
import os
from pathlib import Path

from app.api.model_api import router as model_router
from app.api.routes import router as api_router

# Import enhanced analytics if available
try:
    from app.api.enhanced_analytics import router as analytics_router
    ENHANCED_ANALYTICS_AVAILABLE = True
except ImportError:
    ENHANCED_ANALYTICS_AVAILABLE = False
    print("‚ö†Ô∏è  Enhanced analytics not available - running without enhanced logging")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan management."""
    # Startup
    print("üöÄ Starting Cybrty Pentest API with Enhanced Analytics...")
    if ENHANCED_ANALYTICS_AVAILABLE:
        print("‚úÖ Enhanced analytics and logging enabled")
    else:
        print("‚ö†Ô∏è  Enhanced analytics disabled - check dependencies")
    yield
    # Shutdown
    print("üõë Shutting down Cybrty Pentest API...")


# Create FastAPI app
app = FastAPI(
    title="Cybrty Pentest API",
    description="Advanced AI-Driven Penetration Testing Platform with Enhanced Analytics",
    version="2.0.0",
    lifespan=lifespan
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure appropriately for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount static files
static_dir = Path(__file__).parent.parent / "static"
if static_dir.exists():
    app.mount("/static", StaticFiles(directory=static_dir), name="static")

# Include routers
app.include_router(model_router)
app.include_router(api_router)

# Include enhanced analytics router if available
if ENHANCED_ANALYTICS_AVAILABLE:
    app.include_router(analytics_router)


# Health check endpoint
@app.get("/api/v1/health")
async def health_check():
    """Health check endpoint."""
    return {
        "status": "healthy",
        "service": "cybrty-pentest-api",
        "version": "2.0.0",
        "enhanced_analytics": ENHANCED_ANALYTICS_AVAILABLE
    }


# Root endpoint
@app.get("/")
async def root():
    """Root endpoint with API information."""
    return {
        "message": "Cybrty Pentest API - Advanced AI-Driven Penetration Testing Platform",
        "version": "2.0.0",
        "docs": "/docs",
        "enhanced_analytics": ENHANCED_ANALYTICS_AVAILABLE,
        "endpoints": {
            "health": "/api/v1/health",
            "docs": "/docs",
            "openapi": "/openapi.json"
        }
    }


# Serve static web interface if available
@app.get("/ui")
async def web_interface():
    """Serve the web interface."""
    static_file = Path(__file__).parent.parent / "static" / "index.html"
    if static_file.exists():
        return FileResponse(static_file)
    else:
        return {
            "message": "Web interface not available",
            "docs": "/docs",
            "api": "/api/v1/"
        }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
