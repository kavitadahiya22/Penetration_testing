"""Pydantic schemas for API requests and responses."""

from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


# Request schemas
class PlanRequest(BaseModel):
    """Request schema for plan generation."""
    targets: List[str] = Field(..., description="List of targets (IPs, domains, URLs)")
    depth: str = Field(..., description="Scan depth: quick, standard, or deep")
    features: List[str] = Field(..., description="Features to include: recon, web, vuln, exploit, creds, lateral, priv-esc")
    simulate: bool = Field(default=True, description="Run in simulation mode")
    tenant_id: str = Field(..., description="Tenant identifier")


class RunInputs(BaseModel):
    """Input parameters for a run."""
    targets: List[str] = Field(..., description="List of targets")
    depth: str = Field(..., description="Scan depth")
    features: List[str] = Field(..., description="Features to include")
    simulate: bool = Field(default=True, description="Run in simulation mode")


class RunRequest(BaseModel):
    """Request schema for run execution."""
    tenant_id: str = Field(..., description="Tenant identifier")
    inputs: RunInputs = Field(..., description="Run input parameters")
    plan_id: Optional[str] = Field(None, description="Optional pre-generated plan ID")


# Response schemas
class Step(BaseModel):
    """A single step in a pentesting plan."""
    id: str = Field(..., description="Step identifier")
    agent: str = Field(..., description="Agent type")
    tool: str = Field(..., description="Tool to use")
    params: Dict[str, Any] = Field(..., description="Tool parameters")


class PlanResponse(BaseModel):
    """Response schema for plan generation."""
    plan_id: str = Field(..., description="Unique plan identifier")
    steps: List[Step] = Field(..., description="List of execution steps")
    notes: str = Field(..., description="Plan notes and safety information")


class RunResponse(BaseModel):
    """Response schema for run initiation."""
    run_id: str = Field(..., description="Unique run identifier")
    status: str = Field(..., description="Run status")
    plan_id: str = Field(..., description="Associated plan identifier")


class Progress(BaseModel):
    """Progress information for a run."""
    current: int = Field(..., description="Current step number")
    total: int = Field(..., description="Total number of steps")


class StepStatus(BaseModel):
    """Status of a single step."""
    id: str = Field(..., description="Step identifier")
    agent: str = Field(..., description="Agent type")
    tool: str = Field(..., description="Tool used")
    status: str = Field(..., description="Step status: pending, running, success, error")


class RunStatusResponse(BaseModel):
    """Response schema for run status."""
    run_id: str = Field(..., description="Run identifier")
    status: str = Field(..., description="Overall run status")
    progress: Progress = Field(..., description="Progress information")
    steps: List[StepStatus] = Field(..., description="Status of individual steps")
    artifacts: List[str] = Field(..., description="Generated artifacts")


class CatalogResponse(BaseModel):
    """Response schema for tools and agents catalog."""
    agents: List[str] = Field(..., description="Available agents")
    tools: List[str] = Field(..., description="Available tools")


class HealthResponse(BaseModel):
    """Response schema for health check."""
    status: str = Field(..., description="Overall health status")
    opensearch: str = Field(..., description="OpenSearch connection status")
    provider: str = Field(..., description="Model provider status")


# Action logging schemas
class ActionLog(BaseModel):
    """Schema for action logging."""
    run_id: str
    step_id: str
    tenant_id: str
    agent: str
    tool: str
    status: str
    params: Dict[str, Any]
    summary: Dict[str, Any]
    artifacts: Dict[str, str]
    started_at: datetime
    ended_at: datetime
    duration_ms: int
    error_message: Optional[str] = None


class RunLog(BaseModel):
    """Schema for run logging."""
    run_id: str
    tenant_id: str
    status: str
    steps_count: int
    total_findings: int
    severity: str
    started_at: datetime
    ended_at: datetime
    duration_ms: int
    artifacts: List[str]
    plan_id: str
    features: List[str]
    depth: str
    simulate: bool


# Error schemas
class ErrorResponse(BaseModel):
    """Error response schema."""
    error: str = Field(..., description="Error message")
    details: Optional[str] = Field(None, description="Detailed error information")
    code: Optional[str] = Field(None, description="Error code")


# Tool-specific schemas
class NmapParams(BaseModel):
    """Nmap tool parameters."""
    target: str = Field(..., description="Target to scan")
    profile: str = Field(default="-sV -T4", description="Nmap scan profile")


class AmassParams(BaseModel):
    """Amass tool parameters."""
    domain: str = Field(..., description="Domain to enumerate")
    mode: str = Field(default="passive", description="Enumeration mode")


class ZAPParams(BaseModel):
    """ZAP tool parameters."""
    target: str = Field(..., description="Target URL")
    baseline: bool = Field(default=True, description="Run baseline scan")


class SQLMapParams(BaseModel):
    """SQLMap tool parameters."""
    url: str = Field(..., description="Target URL")
    risk: int = Field(default=1, description="Risk level (1-3)")
    level: int = Field(default=1, description="Test level (1-5)")


class NiktoParams(BaseModel):
    """Nikto tool parameters."""
    host: str = Field(..., description="Target host/URL")


class HydraParams(BaseModel):
    """Hydra tool parameters."""
    users: List[str] = Field(..., description="List of usernames")
    wordlist: str = Field(..., description="Password wordlist path")
    hosts: List[str] = Field(..., description="Target hosts")
    service: str = Field(default="ssh", description="Service to attack")


class CrackMapExecParams(BaseModel):
    """CrackMapExec tool parameters."""
    targets: List[str] = Field(..., description="Target hosts")
    protocol: str = Field(default="smb", description="Protocol to use")
    action: str = Field(default="enum", description="Action to perform")


class MetasploitParams(BaseModel):
    """Metasploit tool parameters."""
    host: str = Field(..., description="Target host")
    module: str = Field(..., description="Exploit module")
    payload: str = Field(..., description="Payload to use")


class BloodHoundParams(BaseModel):
    """BloodHound tool parameters."""
    data_path: Optional[str] = Field(None, description="Path to BloodHound data")
    query: str = Field(..., description="BloodHound query to execute")
    neo4j_uri: Optional[str] = Field(None, description="Neo4j database URI")
    neo4j_user: Optional[str] = Field(None, description="Neo4j username")
    neo4j_password: Optional[str] = Field(None, description="Neo4j password")
