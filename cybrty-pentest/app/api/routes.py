"""FastAPI routes for the pentesting service."""

import uuid
from typing import Any, Dict

from fastapi import APIRouter, HTTPException, status

from .deps import LoggerDep, PlannerDep, SettingsDep
from .schemas import (
    CatalogResponse,
    ErrorResponse,
    HealthResponse,
    PlanRequest,
    PlanResponse,
    RunRequest,
    RunResponse,
    RunStatusResponse,
    Step,  # Added import for Step
)
from ..core.executor import PentestExecutor

router = APIRouter(prefix="/api/v1")

# Global executor instance (in production, use proper DI)
_executor_instance = None


def get_executor(settings: SettingsDep, logger: LoggerDep) -> PentestExecutor:
    """Get or create executor instance."""
    global _executor_instance
    if _executor_instance is None:
        _executor_instance = PentestExecutor(settings, logger)
    return _executor_instance


@router.post(
    "/agents/pentest/plan",
    response_model=PlanResponse,
    responses={400: {"model": ErrorResponse}},
    summary="Generate Pentesting Plan",
    description="Generate a comprehensive pentesting plan based on targets and requirements"
)
async def create_plan(
    request: PlanRequest,
    planner: PlannerDep
) -> PlanResponse:
    """Generate a pentesting plan."""
    try:
        plan = await planner.generate_plan(
            targets=request.targets,
            depth=request.depth,
            features=request.features,
            simulate=request.simulate,
            tenant_id=request.tenant_id
        )
        
        return PlanResponse(
            plan_id=plan["plan_id"],
            steps=[
                Step(
                    id=step["id"],
                    agent=step["agent"],
                    tool=step["tool"],
                    params=step["params"]
                )
                for step in plan["steps"]
            ],
            notes=plan.get("notes", "Plan generated successfully")
        )
        
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail={"error": str(e), "code": "VALIDATION_ERROR"}
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "Failed to generate plan", "details": str(e)}
        )


@router.post(
    "/agents/pentest/run",
    response_model=RunResponse,
    responses={400: {"model": ErrorResponse}},
    summary="Execute Pentesting Run",
    description="Execute a pentesting run with auto-generated or provided plan"
)
async def create_run(
    request: RunRequest,
    planner: PlannerDep,
    settings: SettingsDep,
    logger: LoggerDep
) -> RunResponse:
    """Execute a pentesting run."""
    try:
        # Generate plan if not provided
        if request.plan_id:
            # In a real implementation, retrieve the plan from storage
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail={"error": "Plan retrieval not implemented", "code": "NOT_IMPLEMENTED"}
            )
        else:
            # Auto-generate plan
            plan = await planner.generate_plan(
                targets=request.inputs.targets,
                depth=request.inputs.depth,
                features=request.inputs.features,
                simulate=request.inputs.simulate,
                tenant_id=request.tenant_id
            )
        
        # Execute plan
        executor = get_executor(settings, logger)
        run_id = await executor.execute_plan(
            plan=plan,
            tenant_id=request.tenant_id,
            simulate=request.inputs.simulate
        )
        
        return RunResponse(
            run_id=run_id,
            status="accepted",
            plan_id=plan["plan_id"]
        )
        
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail={"error": str(e), "code": "VALIDATION_ERROR"}
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "Failed to execute run", "details": str(e)}
        )


@router.get(
    "/runs/{run_id}",
    response_model=RunStatusResponse,
    responses={404: {"model": ErrorResponse}},
    summary="Get Run Status",
    description="Get the status and progress of a pentesting run"
)
async def get_run_status(
    run_id: str,
    settings: SettingsDep,
    logger: LoggerDep
) -> RunStatusResponse:
    """Get run status."""
    try:
        executor = get_executor(settings, logger)
        
        # Try to get from executor first (active runs)
        status_info = executor.get_run_status(run_id)
        
        if status_info:
            return RunStatusResponse(
                run_id=run_id,
                status=status_info["status"],
                progress=status_info["progress"],
                steps=[],  # Would need to implement step details
                artifacts=status_info.get("artifacts", [])
            )
        
        # Try to get from OpenSearch (completed runs)
        opensearch_status = await logger.get_run_status(run_id)
        
        if opensearch_status:
            return RunStatusResponse(**opensearch_status)
        
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail={"error": f"Run {run_id} not found", "code": "RUN_NOT_FOUND"}
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"error": "Failed to get run status", "details": str(e)}
        )


@router.get(
    "/catalog",
    response_model=CatalogResponse,
    summary="List Available Tools and Agents",
    description="Get list of available pentesting agents and tools"
)
async def get_catalog() -> CatalogResponse:
    """Get catalog of available tools and agents."""
    return CatalogResponse(
        agents=["recon", "web", "exploit", "creds", "lateral", "priv-esc"],
        tools=["amass", "nmap", "zap", "sqlmap", "nikto", "hydra", "crackmapexec", "metasploit", "bloodhound", "nuclei"]
    )


@router.get(
    "/healthz",
    response_model=HealthResponse,
    summary="Health Check",
    description="Check the health status of the pentesting service"
)
async def health_check(
    planner: PlannerDep,
    logger: LoggerDep
) -> HealthResponse:
    """Perform health check."""
    try:
        # Check planner health
        planner_healthy = await planner.health_check()
        provider_info = planner.get_provider_info()
        
        # Check OpenSearch health
        opensearch_healthy = await logger.health_check()
        
        overall_status = "ok" if planner_healthy and opensearch_healthy else "degraded"
        
        return HealthResponse(
            status=overall_status,
            opensearch="ok" if opensearch_healthy else "error",
            provider=provider_info["provider"]
        )
        
    except Exception as e:
        return HealthResponse(
            status="error",
            opensearch="unknown",
            provider="unknown"
        )


# Example request/response documentation
@router.get("/examples", include_in_schema=False)
async def get_examples() -> Dict[str, Any]:
    """Get example requests and responses for documentation."""
    return {
        "plan_request": {
            "targets": ["10.0.0.0/24", "corp.example.com", "https://app.example.com"],
            "depth": "standard",
            "features": ["recon", "web", "vuln", "creds"],
            "simulate": True,
            "tenant_id": "t-123"
        },
        "run_request": {
            "tenant_id": "t-123",
            "inputs": {
                "targets": ["corp.example.com", "10.0.0.0/24", "https://shop.example.com"],
                "depth": "deep",
                "features": ["recon", "web", "vuln", "exploit", "creds", "lateral", "priv-esc"],
                "simulate": True
            }
        },
        "curl_examples": {
            "plan": """curl -X POST "http://localhost:8080/api/v1/agents/pentest/plan" \\
     -H "Content-Type: application/json" \\
     -d '{
       "targets": ["10.0.0.0/24", "corp.example.com"],
       "depth": "standard",
       "features": ["recon", "web"],
       "simulate": true,
       "tenant_id": "t-123"
     }'""",
            "run": """curl -X POST "http://localhost:8080/api/v1/agents/pentest/run" \\
     -H "Content-Type: application/json" \\
     -d '{
       "tenant_id": "t-123",
       "inputs": {
         "targets": ["corp.example.com"],
         "depth": "quick",
         "features": ["recon"],
         "simulate": true
       }
     }'""",
            "status": """curl -X GET "http://localhost:8080/api/v1/runs/{run_id}" """,
            "health": """curl -X GET "http://localhost:8080/api/v1/healthz" """
        }
    }
