#!/usr/bin/env python3
"""CLI utility for managing AI model providers in CybrTy Pentest."""

import sys
import json
import argparse
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.model_manager import get_model_manager
from app.core.config import Settings


def print_json(data, indent=2):
    """Print data as formatted JSON."""
    print(json.dumps(data, indent=indent, default=str))


def cmd_status(args):
    """Show current AI provider status."""
    manager = get_model_manager()
    
    print("=== AI Provider Status ===\n")
    
    # Current provider info
    current_info = manager.get_current_provider_info()
    print("Current Configuration:")
    print_json(current_info)
    print()
    
    # Ollama status
    print("Ollama Status:")
    ollama_status = manager.check_ollama_status()
    print_json(ollama_status)
    print()
    
    # OpenAI status
    print("OpenAI Status:")
    openai_status = manager.check_openai_status()
    print_json(openai_status)
    print()
    
    # Recommendations
    print("Recommendations:")
    recommendations = manager.get_recommended_setup()
    for rec in recommendations["recommendations"]:
        print(f"  {rec}")
    
    if recommendations["setup_commands"]:
        print("\nSetup Commands:")
        for cmd in recommendations["setup_commands"]:
            print(f"  {cmd}")
    
    if recommendations["environment_variables"]:
        print("\nEnvironment Variables:")
        for env_var in recommendations["environment_variables"]:
            print(f"  {env_var}")


def cmd_switch(args):
    """Switch AI provider."""
    manager = get_model_manager()
    
    result = manager.switch_provider(args.provider)
    
    if result["success"]:
        print(f"‚úÖ {result['message']}")
        print(f"   Provider: {result['provider']}")
        print(f"   Model: {result['model_name']}")
        print(f"   API Base: {result['api_base']}")
        
        # Show new status
        print("\nNew Configuration:")
        current_info = manager.get_current_provider_info()
        print_json(current_info)
    else:
        print(f"‚ùå Failed to switch provider: {result['error']}")
        sys.exit(1)


def cmd_test(args):
    """Test current AI provider setup."""
    print("üß™ Testing AI Provider Setup...\n")
    
    try:
        from app.core.crew.registry import CrewRegistry
        settings = Settings.load_from_yaml()
        
        print(f"Current provider: {settings.model.provider}")
        print(f"Model: {settings.model.model_name}")
        print(f"API Base: {settings.model.api_base}")
        print()
        
        # Test CrewAI integration
        print("Testing CrewAI integration...")
        registry = CrewRegistry(settings)
        agents = registry.get_available_agents()
        print(f"‚úÖ CrewAI registry created with {len(agents)} agents")
        
        # Test crew creation
        crew = registry.create_simple_crew(['recon'])
        print(f"‚úÖ Test crew created with {len(crew.agents)} agent(s)")
        
        print("\nüéâ All tests passed! AI provider setup is working correctly.")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        if args.verbose:
            traceback.print_exc()
        sys.exit(1)


def cmd_guide(args):
    """Show provider switching guide."""
    manager = get_model_manager()
    guide = manager.get_provider_switching_guide()
    
    print("=== AI Provider Switching Guide ===\n")
    
    print("Environment Variables:")
    for line in guide["environment_variables"]:
        print(f"  {line}")
    print()
    
    print("Docker Environment:")
    for line in guide["docker_environment"]:
        print(f"  {line}")
    print()
    
    print("Runtime Switching:")
    for line in guide["runtime_switching"]:
        print(f"  {line}")


def cmd_install_ollama(args):
    """Show Ollama installation instructions."""
    print("=== Ollama Installation Guide ===\n")
    
    instructions = [
        "1. Install Ollama:",
        "   macOS: brew install ollama",
        "   Linux: curl -fsSL https://ollama.ai/install.sh | sh",
        "   Windows: Download from https://ollama.ai",
        "",
        "2. Start Ollama service:",
        "   ollama serve",
        "",
        "3. Pull DeepSeek Coder model:",
        "   ollama pull deepseek-coder",
        "",
        "4. Test the installation:",
        "   ollama list",
        "   ollama run deepseek-coder 'Hello, world!'",
        "",
        "5. Configure environment (optional):",
        "   export OLLAMA_BASE_URL=http://localhost:11434",
        "   export OLLAMA_MODEL=deepseek-coder",
        "",
        "6. Verify setup:",
        "   python scripts/ai_manager.py status"
    ]
    
    for instruction in instructions:
        print(instruction)


def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(
        description="AI Model Provider Manager for CybrTy Pentest",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Enable verbose output"
    )
    
    subparsers = parser.add_subparsers(dest="command", help="Available commands")
    
    # Status command
    status_parser = subparsers.add_parser("status", help="Show AI provider status")
    status_parser.set_defaults(func=cmd_status)
    
    # Switch command
    switch_parser = subparsers.add_parser("switch", help="Switch AI provider")
    switch_parser.add_argument(
        "provider", 
        choices=["ollama", "openai", "azure-openai"],
        help="Provider to switch to"
    )
    switch_parser.set_defaults(func=cmd_switch)
    
    # Test command
    test_parser = subparsers.add_parser("test", help="Test current AI provider setup")
    test_parser.set_defaults(func=cmd_test)
    
    # Guide command
    guide_parser = subparsers.add_parser("guide", help="Show provider switching guide")
    guide_parser.set_defaults(func=cmd_guide)
    
    # Install Ollama command
    install_parser = subparsers.add_parser("install-ollama", help="Show Ollama installation guide")
    install_parser.set_defaults(func=cmd_install_ollama)
    
    args = parser.parse_args()
    
    if args.command is None:
        parser.print_help()
        sys.exit(1)
    
    args.func(args)


if __name__ == "__main__":
    main()
