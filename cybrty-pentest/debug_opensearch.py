#!/usr/bin/env python3
"""
Direct OpenSearch testing script to debug artifact storage issues.
"""

import asyncio
import json
import sys
from datetime import datetime

# Add the app directory to Python path
sys.path.insert(0, '/app')

from app.core.config import get_settings
from app.core.logger import OpenSearchLogger


async def test_opensearch_connectivity():
    """Test OpenSearch connectivity and artifact storage."""
    print("🔍 Testing OpenSearch connectivity and artifact storage...")
    
    try:
        # Initialize settings and logger
        settings = get_settings()
        opensearch_logger = OpenSearchLogger(settings.opensearch)
        
        print(f"📊 OpenSearch Config:")
        print(f"   Host: {settings.opensearch.host}")
        print(f"   Port: {settings.opensearch.port}")
        print(f"   Scheme: {settings.opensearch.scheme}")
        
        # Test basic health
        health_ok = await opensearch_logger.health_check()
        print(f"🏥 Health Check: {'✅ OK' if health_ok else '❌ FAILED'}")
        
        if not health_ok:
            print("❌ OpenSearch is not healthy, cannot proceed with tests")
            return False
        
        # Test artifact indexing
        test_run_id = "test-artifact-debug-001"
        test_artifact = {
            "run_id": test_run_id,
            "artifact_name": "test_nmap_output.json",
            "artifact_type": "json",
            "content": {
                "scan_summary": {
                    "hosts_discovered": 1,
                    "ports_found": 3,
                    "scan_time": "2025-08-13T15:30:00.000Z"
                },
                "hosts": [
                    {
                        "ip": "192.168.1.1",
                        "ports": [{"port": 22, "state": "open", "service": "ssh"}]
                    }
                ]
            },
            "created_at": datetime.utcnow().isoformat(),
            "@timestamp": datetime.utcnow().isoformat()
        }
        
        print(f"💾 Testing artifact storage in cybrty-artifacts index...")
        success = await opensearch_logger.client.index_document(
            "cybrty-artifacts", test_artifact
        )
        
        print(f"📝 Artifact Storage: {'✅ SUCCESS' if success else '❌ FAILED'}")
        
        if success:
            # Try to retrieve the artifact
            print(f"🔍 Testing artifact retrieval...")
            await asyncio.sleep(1)  # Allow time for indexing
            
            search_query = {
                "query": {
                    "match": {
                        "run_id": test_run_id
                    }
                }
            }
            
            results = await opensearch_logger.client.search_documents(
                "cybrty-artifacts", search_query
            )
            
            print(f"🔎 Artifact Retrieval: {'✅ FOUND' if results else '❌ NOT FOUND'}")
            if results:
                print(f"   Found {len(results)} artifacts")
                for idx, result in enumerate(results):
                    print(f"   [{idx+1}] {result.get('artifact_name', 'Unknown')}")
        
        return success
        
    except Exception as e:
        print(f"❌ Test failed with exception: {e}")
        import traceback
        print(f"📜 Traceback: {traceback.format_exc()}")
        return False


async def test_artifact_manager():
    """Test the ArtifactManager directly."""
    print("\\n🧪 Testing ArtifactManager directly...")
    
    try:
        from app.tools.crewai_utils import ArtifactManager
        
        # Initialize settings and logger
        settings = get_settings()
        opensearch_logger = OpenSearchLogger(settings.opensearch)
        
        # Create ArtifactManager
        artifact_manager = ArtifactManager(settings.artifacts.dir, opensearch_logger)
        
        print(f"🏗️  ArtifactManager initialized:")
        print(f"   Base Dir: {artifact_manager.base_dir}")
        print(f"   OpenSearch Logger: {'✅ Available' if artifact_manager.opensearch_logger else '❌ None'}")
        
        # Test JSON artifact saving
        test_run_id = "test-manager-001"
        test_content = {
            "tool": "nmap",
            "target": "192.168.1.100",
            "results": ["port 22 open", "port 80 open"],
            "timestamp": datetime.utcnow().isoformat()
        }
        
        print(f"💾 Testing JSON artifact save...")
        result = await artifact_manager.save_artifact(
            run_id=test_run_id,
            filename="direct_test.json",
            content=json.dumps(test_content, indent=2)
        )
        
        print(f"📝 Save Result: {result}")
        
        # Check if it went to OpenSearch or file system
        if result.startswith("opensearch://"):
            print("✅ JSON artifact saved to OpenSearch successfully!")
        elif result.startswith("/"):
            print("⚠️  JSON artifact saved to file system (fallback)")
        else:
            print(f"❓ Unexpected result format: {result}")
            
        return result.startswith("opensearch://")
        
    except Exception as e:
        print(f"❌ ArtifactManager test failed: {e}")
        import traceback
        print(f"📜 Traceback: {traceback.format_exc()}")
        return False


async def main():
    """Run all tests."""
    print("🚀 OpenSearch Artifact Storage Debug Tests")
    print("=" * 50)
    
    # Test 1: Direct OpenSearch connectivity
    opensearch_ok = await test_opensearch_connectivity()
    
    # Test 2: ArtifactManager integration
    manager_ok = await test_artifact_manager()
    
    print("\\n" + "=" * 50)
    print("📊 Test Summary:")
    print(f"   OpenSearch Connectivity: {'✅ PASS' if opensearch_ok else '❌ FAIL'}")
    print(f"   ArtifactManager Integration: {'✅ PASS' if manager_ok else '❌ FAIL'}")
    
    if opensearch_ok and manager_ok:
        print("\\n🎉 All tests passed! JSON artifacts should work correctly.")
    else:
        print("\\n🚨 Some tests failed. Check the logs above for details.")
    
    return opensearch_ok and manager_ok


if __name__ == "__main__":
    asyncio.run(main())
