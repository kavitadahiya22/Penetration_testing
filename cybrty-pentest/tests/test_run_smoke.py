"""Smoke test for run execution."""

import pytest
from app.core.config import Settings
from app.core.logger import OpenSearchLogger
from app.core.executor import PentestExecutor


@pytest.mark.asyncio
async def test_executor_initialization():
    """Test executor can be initialized."""
    settings = Settings()
    logger = OpenSearchLogger(settings.opensearch)
    
    executor = PentestExecutor(settings, logger)
    
    assert executor.settings == settings
    assert executor.opensearch_logger == logger
    assert "nmap" in executor.agents
    assert "amass" in executor.agents


@pytest.mark.asyncio
async def test_simple_plan_execution():
    """Test execution of a simple plan."""
    settings = Settings()
    logger = OpenSearchLogger(settings.opensearch)
    executor = PentestExecutor(settings, logger)
    
    # Simple test plan
    test_plan = {
        "plan_id": "test-plan-123",
        "steps": [
            {
                "id": "s1",
                "agent": "recon",
                "tool": "nmap",
                "params": {
                    "target": "127.0.0.1",
                    "profile": "-sV -T4 --host-timeout 10s"
                }
            }
        ],
        "notes": "Test plan"
    }
    
    # Execute plan (should not actually run tools in test environment)
    run_id = await executor.execute_plan(
        plan=test_plan,
        tenant_id="test-tenant",
        simulate=True
    )
    
    assert run_id is not None
    assert isinstance(run_id, str)
    
    # Check run status
    status = executor.get_run_status(run_id)
    assert status is not None
    assert status["run_id"] == run_id


def test_step_routing():
    """Test that steps are routed to correct agents."""
    settings = Settings()
    logger = OpenSearchLogger(settings.opensearch)
    executor = PentestExecutor(settings, logger)
    
    # Test tool availability
    assert "nmap" in executor.agents
    assert "amass" in executor.agents
    assert "nikto" in executor.agents
    assert "sqlmap" in executor.agents
    assert "hydra" in executor.agents
    assert "zap" in executor.agents


def test_severity_determination():
    """Test severity determination logic."""
    settings = Settings()
    logger = OpenSearchLogger(settings.opensearch)
    executor = PentestExecutor(settings, logger)
    
    # Test different severity levels
    assert executor._determine_severity({"error": "test"}) == "high"
    assert executor._determine_severity({"total_findings": 15}) == "high"
    assert executor._determine_severity({"total_findings": 7}) == "medium"
    assert executor._determine_severity({"total_findings": 2}) == "low"
    assert executor._determine_severity({"total_findings": 0}) == "info"


def test_feature_extraction():
    """Test feature extraction from plans."""
    settings = Settings()
    logger = OpenSearchLogger(settings.opensearch)
    executor = PentestExecutor(settings, logger)
    
    test_plan = {
        "steps": [
            {"agent": "recon", "tool": "nmap", "params": {}},
            {"agent": "web", "tool": "zap", "params": {}},
            {"agent": "recon", "tool": "amass", "params": {}}
        ]
    }
    
    features = executor._extract_features_from_plan(test_plan)
    assert "recon" in features
    assert "web" in features
    assert len(features) == 2  # Should deduplicate


def test_depth_extraction():
    """Test depth extraction from plans."""
    settings = Settings()
    logger = OpenSearchLogger(settings.opensearch)
    executor = PentestExecutor(settings, logger)
    
    # Quick depth (few steps)
    quick_plan = {"steps": [{"agent": "recon"}] * 3}
    assert executor._extract_depth_from_plan(quick_plan) == "quick"
    
    # Standard depth
    standard_plan = {"steps": [{"agent": "recon"}] * 6}
    assert executor._extract_depth_from_plan(standard_plan) == "standard"
    
    # Deep scan
    deep_plan = {"steps": [{"agent": "recon"}] * 10}
    assert executor._extract_depth_from_plan(deep_plan) == "deep"
