"""Test plan schema validation."""

import pytest
from app.core.planner import PentestPlanner
from app.core.config import Settings


@pytest.mark.asyncio
async def test_plan_generation():
    """Test that planner generates valid plans."""
    # Create test settings
    settings = Settings()
    planner = PentestPlanner(settings)
    
    # Test plan generation
    plan = await planner.generate_plan(
        targets=["10.0.0.0/24", "corp.example.com"],
        depth="standard",
        features=["recon", "web"],
        simulate=True,
        tenant_id="test-tenant"
    )
    
    # Validate plan structure
    assert "plan_id" in plan
    assert "steps" in plan
    assert "notes" in plan
    assert isinstance(plan["steps"], list)
    assert len(plan["steps"]) > 0
    
    # Validate steps
    for step in plan["steps"]:
        assert "id" in step
        assert "agent" in step
        assert "tool" in step
        assert "params" in step
        assert step["agent"] in ["recon", "web", "exploit", "creds", "lateral", "priv-esc"]


@pytest.mark.asyncio
async def test_plan_all_agents():
    """Test plan generation includes all requested agents."""
    settings = Settings()
    planner = PentestPlanner(settings)
    
    all_features = ["recon", "web", "vuln", "exploit", "creds", "lateral", "priv-esc"]
    
    plan = await planner.generate_plan(
        targets=["10.0.0.0/24", "corp.example.com", "https://app.example.com"],
        depth="deep",
        features=all_features,
        simulate=True,
        tenant_id="test-tenant"
    )
    
    # Check that plan includes steps for multiple features
    agents_in_plan = set(step["agent"] for step in plan["steps"])
    assert len(agents_in_plan) >= 3  # Should have at least 3 different agents


def test_plan_validation():
    """Test plan validation logic."""
    settings = Settings()
    planner = PentestPlanner(settings)
    
    # Test valid plan
    valid_plan = {
        "plan_id": "test-123",
        "steps": [
            {
                "id": "s1",
                "agent": "recon",
                "tool": "nmap",
                "params": {"target": "10.0.0.0/24", "profile": "-sV -T4"}
            }
        ],
        "notes": "Test plan"
    }
    
    validated = planner._validate_plan(valid_plan)
    assert validated["plan_id"] == "test-123"
    
    # Test invalid plan (missing steps)
    invalid_plan = {"plan_id": "test-456", "notes": "Invalid"}
    
    with pytest.raises(ValueError, match="Plan must contain 'steps'"):
        planner._validate_plan(invalid_plan)


def test_input_validation():
    """Test input parameter validation."""
    settings = Settings()
    planner = PentestPlanner(settings)
    
    # Test invalid depth
    with pytest.raises(ValueError, match="Depth must be one of"):
        planner._validate_inputs(["10.0.0.0/24"], "invalid", ["recon"])
    
    # Test invalid feature
    with pytest.raises(ValueError, match="Invalid feature"):
        planner._validate_inputs(["10.0.0.0/24"], "standard", ["invalid_feature"])
    
    # Test empty targets
    with pytest.raises(ValueError, match="At least one target must be specified"):
        planner._validate_inputs([], "standard", ["recon"])
